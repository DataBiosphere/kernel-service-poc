name: POC Perf Tests
env:
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-dev-account.json
  GOOGLE_SA_CERT: /tmp/jade-dev-account.pem
  GOOGLE_CLOUD_PROJECT: terra-datarepo-alpha
  GOOGLE_CLOUD_DATA_PROJECT: terra-datarepo-alpha-data
  IT_JADE_API_URL: https://data.alpha.envs-terra.bio
  PGHOST: 127.0.0.1
  PGPASSWORD: postgres
  DB_DATAREPO_URI: "jdbc:postgresql://${PGHOST}:5432/datarepo"
  DB_STAIRWAY_URI: "jdbc:postgresql://${PGHOST}:5432/stairway"
on:
  push:
    paths-ignore:
      - '*.md'
      - '.github/**'
jobs:
  test-runner-template-test:
    runs-on: ubuntu-latest
    # run a local Postgres container in Docker for the basic check tests
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: Set up AdoptOpenJDK 11
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: "Import Vault secrets"
        uses: hashicorp/vault-action@v2.0.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          secretId: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/alpha/datarepo-api-sa key | B64_APPLICATION_CREDENTIALS ;
      - name: "Perform IAM policy cleanup"
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
          jq -r .private_key ${GOOGLE_APPLICATION_CREDENTIALS} > ${GOOGLE_SA_CERT}
          gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}
          # retrieve all iam policies for the data project
          BINDINGS=$(gcloud projects get-iam-policy ${GOOGLE_CLOUD_DATA_PROJECT} --format=json)
          # remove any policies that start with group:policy- or deleted:group:policy-
          # group policies need to be cleared out to avoid hitting 250 iam policy limit
          # that are created during test runs
          OK_BINDINGS=$(echo ${BINDINGS} | jq 'del(.bindings[] | select(.role=="roles/bigquery.jobUser") | .members[] | select(startswith("group:policy-") or startswith("deleted:group:policy-")))')
          # overwrite the iam policy without the group and deleted policies
          echo ${OK_BINDINGS} | jq '.' > policy.json
          gcloud projects set-iam-policy ${GOOGLE_CLOUD_DATA_PROJECT} policy.json
      - name: "Import Vault dev secrets"
        uses: hashicorp/vault-action@v2.0.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          secretId: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
      - name: "Build and run test runner plugin tests"
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
          jq -r .private_key ${GOOGLE_APPLICATION_CREDENTIALS} > ${GOOGLE_SA_CERT}
          # check that postgres is ready
          pg_isready -h ${PGHOST} -p 5432
          # psql -U postgres -f ./db/create-data-repo-db
          # run test runner plugin task - echo
          ./gradlew spotlessApply
          ./gradlew spotlessCheck
          ./gradlew echo
